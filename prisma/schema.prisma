// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}
enum Language {
  es
  en
}
enum Theme {
  DARK
  LIGHT
}
enum TypeCustomField {
  STRING
  INTEGER
  BOOLEAN
  DATE
}
enum Status {
  ACTIVE
  BLOCKED
}

model User {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  firstName           String
  lastName            String
  email               String             @unique()
  password            String
  status              Status             @default(ACTIVE)
  role                UserRole           @default(USER)
  collections         Collection[] 
  author              Collection[]       @relation("AuthorOfCollections")     
  collectionsEdited   Collection[]       @relation("CollectionEdited")     
  userPreferences     UserPreferences? 
  likes               Likes[]
  comments            Comments[]
  items               Item[]
  itemsOwner          Item[]             @relation("ItemOwner")     
  itemsEdited         Item[]             @relation("ItemEditedBy")     

  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

}

model UserPreferences { 
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique @db.ObjectId

  language      Language
  theme         Theme
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}


model Collection {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId

  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId

  author        User?      @relation("AuthorOfCollections",fields: [authorId], references: [id])
  authorId       String?    @db.ObjectId

  editedBy       User     @relation("CollectionEdited",fields: [editedById], references: [id])
  editedById     String   @db.ObjectId

  isEdited      Boolean   @default(false)

  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String    @db.ObjectId 

  name          String 
  description   String

  imageId       String?
  customFields  CustomFields[]   
  items         Item[]  

  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@unique([userId, name]) 
}

model Category {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String

  collections   Collection[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CustomFields {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  collection    Collection        @relation(fields: [collectionId], references: [id])
  collectionId  String            @db.ObjectId

  
  name          String
  type          TypeCustomField 

  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt 

  @@unique([collectionId, name])        
}



model Tags  {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String   @unique
 items         ItemTag[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt


}
model Item {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId

  user           User             @relation("ItemOwner",fields: [userId], references: [id])
  userId         String           @db.ObjectId
  
  editedBy       User?            @relation("ItemEditedBy",fields: [editedById], references: [id])
  editedById     String?          @db.ObjectId

  isEdited       Boolean          @default(false)

  author         User            @relation(fields: [authorId], references: [id])
  authorId       String          @db.ObjectId
  collection     Collection      @relation(fields: [collectionId], references: [id])
  collectionId   String          @db.ObjectId
  tags           ItemTag[]     

  name           String          
  customFields   Json?

  likes          Likes[]
  comments       Comments[]
  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model ItemTag {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  itemId   String @db.ObjectId
  tagId    String @db.ObjectId
  
  item     Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tag      Tags   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Likes { 
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  item          Item     @relation(fields: [itemId], references: [id])
  itemId        String   @db.ObjectId

  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt     

  @@unique([itemId,userId]) 
}

model Comments {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  item          Item     @relation(fields: [itemId], references: [id])
  itemId        String   @db.ObjectId

  user         User      @relation(fields: [userId], references: [id])
  userId       String    @db.ObjectId
  content      String

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt      
}
