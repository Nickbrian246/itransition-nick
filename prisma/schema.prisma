// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}
enum Language {
  ES
  EN
}
enum Theme {
  DARK
  LIGHT
}


model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String
  lastName        String
  email           String           @unique()
  password        String
  role            UserRole         @default(USER)
  collections     Collection[]       
  userPreferences UserPreferences? 
  likes           Likes[]
  comments        Comments[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

}

model UserPreferences { 
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique @db.ObjectId

  language      Language
  theme         Theme
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}


model Collection {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId

  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String    @db.ObjectId 

  name          String 
  description   String

  imageId       String?
  customFields  CustomFields[]   
  items         Item[]  

  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

}

model Category {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String

  collections   Collection[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CustomFields {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  collection    Collection  @relation(fields: [collectionId], references: [id])
  collectionId  String      @db.ObjectId

  
  name          String
  valueStr      String?
  valueInt      Int?
  valueBol      Boolean? 

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt        
}



model Tags  {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String   @unique
  items         Item[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt


}
model Item {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId

  collection     Collection      @relation(fields: [collectionId], references: [id])
  collectionId   String          @db.ObjectId

  tag            Tags            @relation(fields: [tagId], references: [id])
  tagId          String          @db.ObjectId

  customFields   Json?

  likes         Likes[]
  comments      Comments[]
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}


model Likes { 
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  item          Item     @relation(fields: [itemId], references: [id])
  itemId        String   @db.ObjectId

  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt      

}

model Comments {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  item          Item     @relation(fields: [itemId], references: [id])
  itemId        String   @db.ObjectId

  user         User      @relation(fields: [userId], references: [id])
  userId       String    @db.ObjectId
  content      String

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt      
}
